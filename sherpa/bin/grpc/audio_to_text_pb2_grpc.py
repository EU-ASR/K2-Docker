# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import audio_to_text_pb2 as audio__to__text__pb2


class Module_ASRCoreStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TranscribeBuffer = channel.stream_stream(
                '/module_asrcore.Module_ASRCore/TranscribeBuffer',
                request_serializer=audio__to__text__pb2.AudioBuffer.SerializeToString,
                response_deserializer=audio__to__text__pb2.RecognizedTokens.FromString,
                )


class Module_ASRCoreServicer(object):
    """Interface exported by the server.
    """

    def TranscribeBuffer(self, request_iterator, context):
        """A Bidirectional streaming RPC.

        Accepts a stream of AudioBuffers sent while microphone is active,
        while sending back recognized tokes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Module_ASRCoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TranscribeBuffer': grpc.stream_stream_rpc_method_handler(
                    servicer.TranscribeBuffer,
                    request_deserializer=audio__to__text__pb2.AudioBuffer.FromString,
                    response_serializer=audio__to__text__pb2.RecognizedTokens.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'module_asrcore.Module_ASRCore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Module_ASRCore(object):
    """Interface exported by the server.
    """

    @staticmethod
    def TranscribeBuffer(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/module_asrcore.Module_ASRCore/TranscribeBuffer',
            audio__to__text__pb2.AudioBuffer.SerializeToString,
            audio__to__text__pb2.RecognizedTokens.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
